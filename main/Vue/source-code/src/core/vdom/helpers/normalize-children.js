/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
/**zh-cn
 * 模板引擎尝试在编译时静态分析模板来尽可能的最小化normalization操作,以提升性能.
 * 对于普通的HTML标记(即不包括组件), 完全可以跳过normalization, 因为生成的
 * 渲染函数是保证返回VNode组成的数组的, 只有以下俩种可能需要进行额外的normalization
 */
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
/**zh-cn
 * 1. children可能包含组件数组(因为函数式组件可能返回一个数组),
 * 此时, 需要一个简单的函数用于对其进行扁平化(flatten)操作, 因为
 * 函数式组件以及扁平化好了其children, 所以我们只需要考虑flatten一层
 */
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    // 当有元素是数组时, 则通过concat方法将二维数组降到一维
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
/**zh-cn
 * 2. 当children包含嵌套结构时, 如<template>, <slot>, v-for, 使用者手写的render函数,
 * JSX等, 则需要进行一次完整normalization操作(需要考虑到所有可能的子元素类型)
 */
export function normalizeChildren (children: any): ?Array<VNode> {
  // 当为基本类型时, 以其为文本转换为文本VNode, 
  // 为数组时, 则对其进行完整的normalize操作
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

// 判断是否是文本节点
// 判断依据: node节点及其自身text属性存在, 并且不为comment
function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

// 递归进行normalize
function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, lastIndex, last
  for (i = 0; i < children.length; i++) {
    c = children[i]
    // 当c未定义, 或者是布尔值的时候跳过
    // WHY: 什么情况下会未定义？什么情况下会为布尔值
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1
    last = res[lastIndex]
    // nested
    // 处理嵌套的情况
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // merge adjacent text nodes
        // 合并相邻的文本节点
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          c.shift()
        }
        // WHY 这里为什么不用res = res.concat(c) 这种？
        res.push.apply(res, c)
      }
    // 当目前子元素为基本类型时
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        /**zh-cn
         * 合并相邻的文本节点
         * 对于服务器端渲染hydration(WHY: hydration是什么意思？)是必需的
         * 因为当渲染为HTML字符串时, 其文本节点本质上是已经合并了的。
         */
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // convert primitive to vnode
        // 将基本类型值转换为文本节点
        res.push(createTextVNode(c))
      }
    // 如果既不是数组也不是基本类型, 则代表其为VNode对象
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        // 合并相邻文本节点
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        // 当其
        // 为嵌套的数组children设置默认的key(如v-for生成的children)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
